@startuml
entity WhoDateReported {
    id: Integer
	date_reported: String
    year_week: String
    datum: Date
    year: Integer
    month: Integer
    day_of_month: Integer
    day_of_week: Integer
    week_of_year: Integer
    {classifier} create_new_object_factory(my_date_rep)
}
entity WhoRegion {
    id: Integer
    region: String
}
entity WhoCountry {
    id: Integer
	country_code: String
    country: String
    {classifier} remove_all()
    {classifier} get_all_as_page(page: Integer)
    {classifier} get_all()
    {classifier} get_all_as_dict()
    {classifier} get_by_id(other_id: Integer)
    {classifier} get_germany()
    {classifier} find_by_country_code_and_country_and_who_region_id(i_country_code, i_country, my_region)
    {classifier} find_by_country_code(i_country_code)
    {classifier} find_by_country(i_country)
    {classifier} get_by_country_code(i_country_code)
    {classifier} get_by_country(i_country)
    {classifier} get_who_countries_for_region(region, page)
}
entity WhoData {
    id: Integer
	cases_new: Integer
    cases_cumulative: Integer
    deaths_new: Integer
    deaths_cumulative: Integer
    {classifier} remove_all()
    {classifier} get_all_as_page(page: Integer)
    {classifier} get_all()
    {classifier} get_by_id(other_id: Integer)
    {classifier} find_one_or_none_by_date_and_country(my_date_reported, my_country)
    {classifier} get_data_for_country(who_country, page)
    {classifier} get_data_for_day(date_reported, page)
    {classifier} get_data_for_day_order_by_cases_new(date_reported, page)
    {classifier} get_data_for_day_order_by_cases_cumulative(date_reported, page)
    {classifier} get_data_for_day_order_by_deaths_new(date_reported, page)
    {classifier} get_data_for_day_order_by_deaths_cumulative(date_reported, page)
    {classifier} get_data_for_country_order_by_cases_new(who_country, page)
    {classifier} get_data_for_country_order_by_cases_cumulative(who_country, page)
    {classifier} get_data_for_country_order_by_deaths_new(who_country, page)
    {classifier} get_data_for_country_order_by_deaths_cumulative(who_country, page)
}
entity WhoImport {
    id: Integer
    date_reported: String
    country_code: String
    country: String
    who_region: String
    new_cases: String
    cumulative_cases: String
    new_deaths: String
    cumulative_deaths: String
    {classifier} remove_all()
    {classifier} get_all_as_page(page: Integer)
    {classifier} get_all()
    {classifier} get_by_id(other_id: Integer)
    {classifier} get_regions()
    {classifier} get_dates_reported()
    {classifier} get_for_one_day(day: String)
    {classifier} get_dates_reported_as_array()
    {classifier} get_new_dates_as_array()
    {classifier} countries()
}

Course "1" *--> "*" Workflow: workflows
Workflow "*" --> "1" Course:  course
Workflow "1" *--> "*" Lektion: lektionen
Lektion "*" --> "1" Workflow: course_workflow
Lektion "1" o--> "*" Abbildung: abbildungen
Abbildung "*" --> "1" Lektion: lektion
Lektion "1" *--> "*" FolienSatz: foliensaetze
FolienSatz "*" --> "1" Lektion: lektion
FolienSatz "1" *--> "*" Folie: folien
FolienSatz "1" *--> "*" Abbildung: abbildungen
Folie "*" --> "1" FolienSatz: foliensatz
Folie "1" o--> "*" Abbildung: abbildungen
Abbildung "*" --> "1" Folie: folie
Abbildung "*" --> "1" FolienSatz: foliensatz

class WhoService {
    pretask_database_drop_create()
    task_database_drop_create()
    run_download_only()
    run_import_only()
    run_update_dimension_tables_only()
    run_update_fact_table_incremental_only()
    run_update_fact_table_initial_only()
    run_update_star_schema_incremental()
    run_update_star_schema_initial()
    download_all_files()
    task_import_all_files()
    update_dimension_tables_only()
    update_fact_table_initial_only()
    update_fact_table_incremental_only()
}
class WhoServiceImport {
    import_file()
}
class WhoServiceUpdate {
    __update_date_reported()
    __update_region()
    __update_country()
    __update_data_incremental()
    __update_data_initial()
    __update_dimension_tables()
    update_dimension_tables_only()
    update_fact_table_incremental_only()
    update_fact_table_initial_only()
    update_star_schema_incremental()
    update_star_schema_initial()
}
class ApplicationServiceConfig {
	limit_nr: Integer
    data_path: String
    slug: String
    category: String
    sub_category: String
    tablename: String
    cvsfile_name: String
    url_src: String
    cvsfile_path: String
    msg_job: String
    msg_ok: String
    msg_error: String
	create_config_for_who()
	create_config_for_rki_vaccination()
	create_config_for_owid()
	create_config_for_ecdc()
	create_config_for_rki_bundeslaender()
	create_config_for_rki_landkreise()
}
ArtefactContentService : SQLAlchemy database
ArtefactContentService : String[] courses
ArtefactContentService : String[] workflows
ArtefactContentService : String[] lektionen
ArtefactContentService : String[] course_names
class who_views {
    url_root()
    url_home()
    url_update_data()
    url_rename()
    url_kurse_all()
    url_kurse_workflow_lektionen(workflow_id: Integer)
    url_kurse_workflow_lektion_folien(lektion_id: Integer)
    url_abbbildung_id(abbildung_id: Integer)
    url_db_dump()
    url_db_reimport()
    task_data_update()
    task_rename_src_files()
}
@enduml
